{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/actions/ChatPanelActions.js","app/actions/GrumbleFormActions.js","app/actions/GrumbleStreamActions.js","app/actions/HomeActions.js","app/actions/LoginActions.js","app/actions/SignupActions.js","app/alt.js","app/components/App.js","app/components/ChatPanel.js","app/components/CommentForm.js","app/components/Footer.js","app/components/GrumbleForm.js","app/components/GrumbleStream.js","app/components/Home.js","app/components/Login.js","app/components/Navbar.js","app/components/Signup.js","app/main.js","app/routes.js","app/stores/ChatPanelStore.js","app/stores/GrumbleFormStore.js","app/stores/GrumbleStreamStore.js","app/stores/HomeStore.js","app/stores/LoginStore.js","app/stores/SignupStore.js","node_modules/deep-equal/index.js","node_modules/deep-equal/lib/is_arguments.js","node_modules/deep-equal/lib/keys.js","node_modules/history/lib/Actions.js","node_modules/history/lib/AsyncUtils.js","node_modules/history/lib/DOMStateStorage.js","node_modules/history/lib/DOMUtils.js","node_modules/history/lib/ExecutionEnvironment.js","node_modules/history/lib/createBrowserHistory.js","node_modules/history/lib/createDOMHistory.js","node_modules/history/lib/createHistory.js","node_modules/history/lib/createLocation.js","node_modules/history/lib/deprecate.js","node_modules/history/lib/extractPath.js","node_modules/history/lib/parsePath.js","node_modules/history/lib/runTransitionHook.js","node_modules/invariant/browser.js","node_modules/process/browser.js","node_modules/warning/browser.js"],"names":[],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvlSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import alt from '../alt';\r\n\r\nclass ChatPanelActions {\r\n  constructor() {\r\n    this.generateActions(\r\n      'updateUsername',\r\n      'updateText',\r\n      'updateOnlineUsers',\r\n      'updateMessages',\r\n      'addMessage',\r\n      'clearText'\r\n    );\r\n  }\r\n}\r\n\r\nexport default alt.createActions(ChatPanelActions);","import alt from '../alt';\r\n\r\nclass GrumbleFormActions {\r\n    constructor() {\r\n        this.generateActions(\r\n            'updateText',\r\n            'updateAnnoyanceLevel',\r\n            'addGrumbleSuccess',\r\n            'addGrumbleFail'\r\n        );\r\n    }\r\n\r\n    addGrumble(username, text, annoyanceLevel) {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: '/api/grumble',\r\n            data: { \r\n                    username: username, \r\n                    text: text, \r\n                    annoyanceLevel: annoyanceLevel \r\n                }\r\n        })\r\n        .done((data) => {\r\n            this.actions.addGrumbleSuccess(data.message);\r\n        })\r\n        .fail((data) => {\r\n            this.actions.addGrumbleFail(data.message);\r\n        });\r\n    }\r\n}\r\n\r\nexport default alt.createActions(GrumbleFormActions);","import alt from '../alt';\r\n\r\nclass GrumbleStreamActions {\r\n    constructor() {\r\n        this.generateActions(\r\n          'getGrumblesSuccess',\r\n          'getGrumblesFail',\r\n          'updateCommentFormUsername',\r\n          'updateCommentFormText',\r\n          'incrementNewGrumbleCount',\r\n          'hideComments'\r\n        );\r\n    }\r\n\r\n    getGrumbles() {\r\n        $.ajax({ url: '/api/grumbles' })\r\n          .done(data => {\r\n            this.actions.getGrumblesSuccess(data);\r\n          })\r\n          .fail(data => {\r\n            console.log('fail');\r\n          });\r\n    }\r\n\r\n    updateGrumbles(count) {\r\n      console.log('get.. ' + count);\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: '/api/grumbles/more',\r\n            data: { \r\n                    count: count\r\n                }\r\n        })\r\n          .done(data => {\r\n            this.actions.getGrumblesSuccess(data);\r\n          })\r\n          .fail(data => {\r\n            console.log('fail');\r\n          });\r\n    }\r\n\r\n    addComment(grumbleId, username, text) {\r\n        $.ajax({\r\n            type: 'PUT',\r\n            url: '/api/grumble/comment',\r\n            data: { \r\n                    grumbleId: grumbleId,\r\n                    username: username, \r\n                    text: text\r\n                }\r\n        })\r\n        .done(() => {\r\n            console.log('success');\r\n            this.actions.getGrumbles();\r\n        })\r\n        .fail(() => {\r\n        });\r\n    }\r\n}\r\n\r\nexport default alt.createActions(GrumbleStreamActions);","import alt from '../alt';\r\n\r\nclass HomeActions {\r\n  constructor() {\r\n    this.generateActions(\r\n    \t'updateUsername',\r\n    \t'updateNewGrumbleCount'\r\n    );\r\n  }\r\n}\r\n\r\nexport default alt.createActions(HomeActions);","import alt from '../alt';\r\n\r\nclass LoginActions {\r\n  constructor() {\r\n    this.generateActions(\r\n      'updateUsername',\r\n      'updatePassword'\r\n    );\r\n  }\r\n}\r\n\r\nexport default alt.createActions(LoginActions);","import alt from '../alt';\r\n\r\nclass SignupActions {\r\n  constructor() {\r\n    this.generateActions(\r\n      'updateUsername',\r\n      'updatePassword'\r\n    );\r\n  }\r\n}\r\n\r\nexport default alt.createActions(SignupActions);","import Alt from 'alt';\r\n\r\nexport default new Alt();","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n  \t\t<Navbar history={this.props.history} />\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ChatPanelStore from '../stores/ChatPanelStore'\r\nimport ChatPanelActions from '../actions/ChatPanelActions';\r\n\r\nclass ChatPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ChatPanelStore.getState();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        ChatPanelStore.listen(this.onChange);\r\n\r\n        let socket = io();\r\n        \r\n        socket.on('onlineUsers', (data) => {\r\n          ChatPanelActions.updateOnlineUsers(data);\r\n        });\r\n\r\n        socket.on('startMessages', (messages) => {\r\n            if(this.state.messages.length === 0)\r\n                ChatPanelActions.updateMessages(messages);\r\n        });\r\n\r\n        socket.on('chatMessage', (message) => {\r\n            ChatPanelActions.addMessage(message);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        ChatPanelStore.unlisten(this.onChange);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        let message = {\r\n            username: this.state.username.trim(),\r\n            text: this.state.text.trim()\r\n        };\r\n\r\n        if (message.username && message.text) {\r\n            let socket = io.connect();\r\n            socket.emit('chatMessage', message);\r\n        }\r\n\r\n        ChatPanelActions.clearText();\r\n    }\r\n\r\n    render() {\r\n        var messages = this.state.messages.map((message, index) => {\r\n            return (\r\n                <div key={index} className=\"message\">\r\n                    <div className=\"chat-username\">{message.username}</div>\r\n                    <div className=\"chat-text\">{message.text}</div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"chat-panel\">\r\n                <div className=\"panel-title\">Chat</div>\r\n                <div id=\"users-count\"> {this.state.onlineUsers} users are here</div>\r\n                <div id=\"chat-content\">\r\n                    {messages}\r\n                </div>\r\n                <div className=\"new-message\">\r\n                    <form onSubmit={this.handleSubmit.bind(this)} className=\"pure-form pure-form-stacked message-form\">\r\n                        <input id=\"new-message-username\" value={this.state.username} onChange={ChatPanelActions.updateUsername} placeholder=\"Username\" required/>\r\n                        <textarea id=\"new-message-text\" value={this.state.text} onChange={ChatPanelActions.updateText} className=\"input-grumble-text\" rows=\"2\" placeholder=\"Message\" reqired />\r\n                        <button id=\"sent-message-btn\" type=\"submit\" className=\"pure-button pure-button-primary\">Send</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatPanel;","import React from 'react';\r\n\r\nfunction CommentForm(props) {\r\n    return (\r\n        <form className=\"pure-form comment-form\" onSubmit={props.handleSubmit}>\r\n            <div className=\"comment-form-top\">\r\n                <input className=\"input-comment-username\" value={props.values.username} onChange={props.onChangeUsername} placeholder=\"Username\" required/>\r\n                <button type=\"submit\" className=\"pure-button pure-button-primary submit-comment-btn\">Submit Comment</button>\r\n            </div>\r\n            <textarea value={props.values.text} onChange={props.onChangeText} className=\"input-comment-text\" rows=\"2\" placeholder=\"Comment\" required />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CommentForm;","import React from 'react';\r\nimport {Link} from 'react-router';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n        I am footer.\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport GrumbleFormStore from '../stores/GrumbleFormStore'\r\nimport GrumbleFormActions from '../actions/GrumbleFormActions';\r\n\r\nclass GrumbleForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = GrumbleFormStore.getState();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        GrumbleFormStore.listen(this.onChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        GrumbleFormStore.unlisten(this.onChange);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        var username = this.props.username.trim();\r\n        var text = this.state.text.trim();\r\n        var annoyanceLevel = this.state.annoyanceLevel;\r\n        if (username && text) {\r\n            GrumbleFormActions.addGrumble(username, text, annoyanceLevel);\r\n\r\n            let socket = io.connect();\r\n            socket.emit('newGrumble', this.props.username);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"user-grumble\">\r\n                <div className=\"panel-title\">\r\n                    New Grumble\r\n                </div>\r\n                <div className=\"new-grumble-panel\">\r\n                    <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmit.bind(this)}>\r\n                \r\n                        <label className=\"input-label\">Username</label>\r\n                        <input value={this.props.username} onChange={this.props.handleUsernameChange} required/>\r\n\r\n                        <label className=\"input-label\">Grumble Text</label>\r\n                        <textarea value={this.state.text} onChange={GrumbleFormActions.updateText}\r\n                            className=\"input-grumble-text\" rows=\"4\" required />\r\n\r\n\r\n                        <label className=\"input-label\">Annoyance Level</label>\r\n                        <select value={this.state.annoyanceLevel} onChange={GrumbleFormActions.updateAnnoyanceLevel} className=\"grumble-input\">\r\n                            <option value=\"0\">Neutral</option>\r\n                            <option value=\"1\">Mildly Annoyed</option>\r\n                            <option value=\"2\">Infuriated</option>\r\n                            <option value=\"3\">Extremely Angry</option>\r\n                        </select>\r\n\r\n                        <button type=\"submit\" className=\"pure-button pure-button-primary input-button\">Submit</button>\r\n                    </form>\r\n                    <span className='help-block'>{this.state.helpBlock}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GrumbleForm;","import React from 'react';\r\nimport GrumbleStreamStore from '../stores/GrumbleStreamStore'\r\nimport GrumbleStreamActions from '../actions/GrumbleStreamActions';\r\nimport CommentForm from './CommentForm';\r\n\r\nclass GrumbleStream extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = GrumbleStreamStore.getState();\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        GrumbleStreamStore.listen(this.onChange);\r\n        GrumbleStreamActions.getGrumbles();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        GrumbleStreamStore.unlisten(this.onChange);\r\n    }\r\n\r\n    onChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    handleCommentFormUsernameChange(index, event) {\r\n        let data = {\r\n            index: index,\r\n            event: event\r\n        };\r\n\r\n        GrumbleStreamActions.updateCommentFormUsername(data);\r\n    }\r\n\r\n    handleCommentFormTextChange(index, event) {\r\n        let data = {\r\n            index: index,\r\n            event: event\r\n        };\r\n\r\n        GrumbleStreamActions.updateCommentFormText(data);\r\n    }\r\n\r\n    handleCommentFormSubmit(event, index, grumbleId){\r\n        event.preventDefault();\r\n\r\n        var username = this.state.commentForms[index].username.trim();\r\n        var text = this.state.commentForms[index].text.trim();\r\n\r\n        if (username && text) {\r\n            GrumbleStreamActions.addComment(grumbleId, username, text);\r\n        }\r\n    }\r\n\r\n    handleHideCommentsClick(event, index){\r\n        event.preventDefault();\r\n        GrumbleStreamActions.hideComments(index);\r\n    }\r\n\r\n    render() {\r\n        var grumbles = this.state.grumbles.map((grumble, index) => {\r\n            \r\n            var comments = grumble.comments.map((comment, index) => {\r\n                return (\r\n                    <div key={index} className=\"comment-container\">\r\n                        <div className=\"space\"></div>\r\n                        <div className=\"comment\">\r\n                            <div className=\"comment-user\">\r\n                                <img className=\"user-icon\" src=\"/img/user-icon.png\" />\r\n                                <div className=\"user-name\"> {comment.username} </div>\r\n                                <div className=\"guest-text\">Guest User</div>\r\n                            </div>\r\n                            <div className=\"comment-content\">{comment.text}</div>\r\n                            <div className=\"comment-footer\">\r\n                                <div className=\"comment-datetime\" title={comment.date.num}>\r\n                                    {comment.date.relative}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n            return (\r\n                <div key={grumble._id} className=\"grumble\">\r\n                    <div className=\"grumble-user\">\r\n                        <img className=\"user-icon\" src=\"/img/user-icon.png\" />\r\n                        <div className=\"user-name\"> {grumble.username} </div>\r\n                        <div className=\"guest-text\">Guest User</div>              \r\n                    </div>\r\n                    <div className=\"grumble-content\">{grumble.text}</div>\r\n                    <div className=\"grumble-footer\">\r\n                        <div className={\"grumble-level grumble-level-\" + grumble.annoyanceLevel.num}>\r\n                            {grumble.annoyanceLevel.text}\r\n                        </div>\r\n                        <div className=\"grumble-datetime\" title={grumble.date.text}>\r\n                            {grumble.date.relative}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"grumble-actions\">\r\n                        <div className=\"space\"></div>\r\n                        <div className=\"action-buttons\">\r\n                            <a href=\"#\" className=\"empathize-btn\"> Empathize </a>\r\n                            <a href=\"#\" className=\"toggle-comments-btn\" onClick={(event) => this.handleHideCommentsClick(event, index)} > {this.state.hideComments[index] ? 'Show ' : 'Hide'} comments \r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    { \r\n                        !this.state.hideComments[index] &&\r\n                        <div className=\"comments-panel\">\r\n                            {comments}\r\n                            <div className=\"new-comment\">\r\n                                <div className=\"space\"></div>\r\n                                <CommentForm \r\n                                    values={this.state.commentForms[index]} \r\n                                    onChangeUsername={(event) => this.handleCommentFormUsernameChange(index, event)}  \r\n                                    onChangeText={(event) => this.handleCommentFormTextChange(index, event)} \r\n                                    handleSubmit={(event) => this.handleCommentFormSubmit(event, index, grumble._id)} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"grumble-stream\">\r\n                <div className=\"panel-title\">\r\n                    Grumble Stream\r\n                </div>\r\n                {   \r\n                    this.props.newGrumbleCount > 0 &&\r\n                    <div id=\"update-stream\">\r\n                        <a href=\"#\" onClick={() => {this.props.handleNewGrumbleClick(); GrumbleStreamActions.getGrumbles();}}>{this.props.newGrumbleCount} New Grumbles. Click to Show.</a>\r\n                    </div>\r\n                }\r\n                <div className=\"grumble-panel\">\r\n                    {grumbles}\r\n                    <div id=\"load-more-grumbles\">\r\n                        <a href=\"#\" onClick={() => GrumbleStreamActions.updateGrumbles(this.state.grumbles.length + 10)}>Load more Grumbles</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GrumbleStream;","import React from 'react';\r\nimport {Link} from 'react-router';\r\nimport HomeStore from '../stores/HomeStore'\r\nimport HomeActions from '../actions/HomeActions';\r\nimport GrumbleForm from './GrumbleForm';\r\nimport GrumbleStream from './GrumbleStream';\r\nimport ChatPanel from './ChatPanel';\r\n\r\nclass Home extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = HomeStore.getState();\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    HomeStore.listen(this.onChange);\r\n\r\n    let socket = io();\r\n    socket.on('newGrumble', (username) => {\r\n        if(username !== this.state.username){\r\n          HomeActions.updateNewGrumbleCount(++this.state.newGrumbleCount);\r\n        }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    HomeStore.unlisten(this.onChange);\r\n  }\r\n\r\n  onChange(state) {\r\n    this.setState(state);\r\n  }\r\n\r\n  handleChangeUsername(event){\r\n    HomeActions.updateUsername(event.target.value);\r\n  }\r\n\r\n  handleNewGrumbleClick(){\r\n    HomeActions.updateNewGrumbleCount(0);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-content\">\r\n        <GrumbleForm \r\n          username={this.state.username} \r\n          handleUsernameChange={this.handleChangeUsername}/>\r\n        <GrumbleStream \r\n          username={this.state.username} \r\n          newGrumbleCount={this.state.newGrumbleCount} \r\n          handleNewGrumbleClick={this.handleNewGrumbleClick}/>\r\n        <ChatPanel />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Link} from 'react-router';\r\nimport LoginStore from '../stores/LoginStore'\r\nimport LoginActions from '../actions/LoginActions';\r\n\r\nclass Login extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = LoginStore.getState();\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    LoginStore.listen(this.onChange);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    LoginStore.unlisten(this.onChange);\r\n  }\r\n\r\n  onChange(state) {\r\n    this.setState(state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"error-message\">\r\n          {this.state.message}\r\n        </div>\r\n        <div className=\"center-content\">\r\n          <div className=\"login-panel\">\r\n            <form className=\"pure-form pure-form-aligned\" method=\"POST\">\r\n                <fieldset>\r\n                  <legend> Login Form</legend>\r\n                    <div className=\"pure-control-group\">\r\n                        <label>Username</label>\r\n                        <input name=\"username\" type=\"text\" placeholder=\"Username\" \r\n                          value={this.state.username} onChange={LoginActions.updateUsername} />\r\n                    </div>\r\n\r\n                    <div className=\"pure-control-group\">\r\n                        <label>Password</label>\r\n                        <input name=\"password\" type=\"password\" placeholder=\"Password\" \r\n                          value={this.state.password} onChange={LoginActions.updatePassword} />\r\n                    </div>\r\n\r\n                    <div className=\"pure-controls\">\r\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">Login</button>\r\n                        <a href=\"/signup\"> Sign Up </a>\r\n                    </div>\r\n                </fieldset>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport {Link} from 'react-router';\r\n\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <a className=\"index-link\" href=\"/\"> Grumbler </a>\r\n        <a className=\"login-link\" href=\"/login\"> Login </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {Link} from 'react-router';\r\nimport SignupStore from '../stores/SignupStore'\r\nimport SignupActions from '../actions/SignupActions';\r\n\r\nclass Login extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = SignupStore.getState();\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    SignupStore.listen(this.onChange);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    SignupStore.unlisten(this.onChange);\r\n  }\r\n\r\n  onChange(state) {\r\n    this.setState(state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"error-message\">\r\n          {this.state.message}\r\n        </div>\r\n        <div className=\"center-content\">\r\n          <div className=\"login-panel\">\r\n            <form className=\"pure-form pure-form-aligned\" method=\"POST\">\r\n                <fieldset>\r\n                  <legend> Sign Up Form</legend>\r\n                    <div className=\"pure-control-group\">\r\n                        <label>Username</label>\r\n                        <input name=\"username\" type=\"text\" placeholder=\"Username\" \r\n                          value={this.state.username} onChange={SignupActions.updateUsername} />\r\n                    </div>\r\n\r\n                    <div className=\"pure-control-group\">\r\n                        <label>Password</label>\r\n                        <input name=\"password\" type=\"password\" placeholder=\"Password\" \r\n                          value={this.state.password} onChange={SignupActions.updatePassword} />\r\n                    </div>\r\n\r\n                    <div className=\"pure-controls\">\r\n                        <button type=\"submit\" className=\"pure-button pure-button-primary\">Sign up</button>\r\n                        <a href=\"/login\"> Login </a>\r\n                    </div>\r\n                </fieldset>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport Router from 'react-router';\r\nimport ReactDOM from 'react-dom';\r\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\r\nimport routes from './routes';\r\n\r\nlet history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n\t<Router history={history}>{routes}</Router>, \r\n\tdocument.getElementById('app')\r\n);\r\n","import React from 'react';\r\nimport {Route} from 'react-router';\r\nimport App from './components/App';\r\nimport Home from './components/Home';\r\nimport Login from './components/Login';\r\nimport Signup from './components/Signup';\r\n\r\nexport default (\r\n  <Route component={App}>\r\n    <Route path='/' component={Home} />\r\n    <Route path='/login' component={Login} />\r\n    <Route path='/signup' component={Signup} />\r\n  </Route>\r\n);","import alt from '../alt';\r\nimport ChatPanelActions from '../actions/ChatPanelActions';\r\n\r\nclass ChatPanelStore {\r\n  constructor() {\r\n    this.bindActions(ChatPanelActions);\r\n    this.username = '';\r\n    this.text = '';\r\n    this.onlineUsers = 0;\r\n    this.messages = [];\r\n  }\r\n\r\n  onUpdateUsername(event) {\r\n    this.username = event.target.value.trim();\r\n  }\r\n\r\n  onUpdateText(event) {\r\n    this.text = event.target.value;\r\n  }\r\n\r\n  onUpdateOnlineUsers(data) {\r\n    this.onlineUsers = data.onlineUsers;\r\n  }\r\n\r\n  onUpdateMessages(messages) {\r\n    this.messages = messages;\r\n  }\r\n\r\n  onAddMessage(message) {\r\n    this.messages.push(message);\r\n  }\r\n\r\n  onClearText() {\r\n    this.text = '';\r\n  }\r\n}\r\n\r\nexport default alt.createStore(ChatPanelStore);","import alt from '../alt';\r\nimport GrumbleFormActions from '../actions/GrumbleFormActions';\r\nimport GrumbleStreamActions from '../actions/GrumbleStreamActions';\r\n\r\nclass GrumbleFormStore {\r\n  constructor() {\r\n    this.bindActions(GrumbleFormActions);\r\n    this.text = '';\r\n    this.annoyanceLevel = 0;\r\n    this.helpBlock = '';\r\n  }\r\n\r\n  onUpdateText(event) {\r\n    this.text = event.target.value;\r\n  }\r\n\r\n  onUpdateAnnoyanceLevel(event) {\r\n    this.annoyanceLevel = event.target.value;\r\n  }\r\n\r\n  onAddGrumbleSuccess(successMessage) {\r\n    this.username = '';\r\n    this.text = '';\r\n    this.annoyanceLevel = 0;\r\n\r\n    GrumbleStreamActions.getGrumbles(10);\r\n  }\r\n\r\n  onAddGrumbleFail(errorMessage) {\r\n    this.helpBlock = errorMessage;\r\n  }\r\n}\r\n\r\nexport default alt.createStore(GrumbleFormStore);","import alt from '../alt';\r\nimport GrumbleStreamActions from '../actions/GrumbleStreamActions';\r\n\r\nclass GrumbleStreamStore {\r\n  constructor() {\r\n    this.bindActions(GrumbleStreamActions);\r\n    this.grumbles = [];\r\n    this.commentForms = [];\r\n    this.hideComments = [];\r\n  }\r\n\r\n  onGetGrumblesSuccess(grumbles) {\r\n    this.commentForms = [];\r\n    this.grumbles = grumbles;\r\n\r\n    for(let i = 0; i < grumbles.length; i++){\r\n      this.commentForms.push({\r\n        username: '',\r\n        text: ''\r\n      });\r\n      this.hideComments.push(false);\r\n    }\r\n  }\r\n\r\n  onGetGrumblesFail(grumbles) {\r\n    this.grumbles = grumbles;\r\n  }\r\n\r\n  onUpdateCommentFormUsername(data) {\r\n    this.commentForms[data.index].username = data.event.target.value.trim();\r\n  }\r\n\r\n  onUpdateCommentFormText(data) {\r\n    this.commentForms[data.index].text = data.event.target.value;\r\n  }\r\n\r\n  onHideComments(index){\r\n    this.hideComments[index] = !this.hideComments[index];\r\n  }\r\n}\r\n\r\nexport default alt.createStore(GrumbleStreamStore);","import alt from '../alt';\r\nimport HomeActions from '../actions/HomeActions';\r\n\r\nclass HomeStore {\r\n  constructor() {\r\n    this.bindActions(HomeActions);\r\n    this.username = '';\r\n    this.newGrumbleCount = 0;\r\n  }\r\n\r\n  onUpdateUsername(username) {\r\n  \tthis.username = username.trim();\r\n  }\r\n\r\n  onUpdateNewGrumbleCount(count) {\r\n  \tthis.newGrumbleCount = count;\r\n  }\r\n}\r\n\r\nexport default alt.createStore(HomeStore);","import alt from '../alt';\r\nimport LoginActions from '../actions/LoginActions';\r\n\r\nclass LoginStore {\r\n  constructor() {\r\n    this.bindActions(LoginActions);\r\n    this.username = '';\r\n    this.password = '';\r\n    this.message = '';\r\n  }\r\n\r\n  onUpdateUsername(event) {\r\n    this.username = event.target.value;\r\n  }\r\n\r\n  onUpdatePassword(event) {\r\n    this.password = event.target.value;\r\n  }\r\n}\r\n\r\nexport default alt.createStore(LoginStore);","import alt from '../alt';\r\nimport SignupActions from '../actions/SignupActions';\r\n\r\nclass SignupStore {\r\n  constructor() {\r\n    this.bindActions(SignupActions);\r\n    this.username = '';\r\n    this.password = '';\r\n    this.message = '';\r\n  }\r\n\r\n  onUpdateUsername(event) {\r\n    this.username = event.target.value;\r\n  }\r\n\r\n  onUpdatePassword(event) {\r\n    this.password = event.target.value;\r\n  }\r\n}\r\n\r\nexport default alt.createStore(SignupStore);","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","/**\n * Indicates that navigation was caused by a call to history.push.\n */\n'use strict';\n\nexports.__esModule = true;\nvar PUSH = 'PUSH';\n\nexports.PUSH = PUSH;\n/**\n * Indicates that navigation was caused by a call to history.replace.\n */\nvar REPLACE = 'REPLACE';\n\nexports.REPLACE = REPLACE;\n/**\n * Indicates that navigation was caused by some other action such\n * as using a browser's back/forward buttons and/or manually manipulating\n * the URL in a browser's location bar. This is the default.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate\n * for more information.\n */\nvar POP = 'POP';\n\nexports.POP = POP;\nexports['default'] = {\n  PUSH: PUSH,\n  REPLACE: REPLACE,\n  POP: POP\n};","\"use strict\";\n\nexports.__esModule = true;\nexports.loopAsync = loopAsync;\n\nfunction loopAsync(turns, work, callback) {\n  var currentTurn = 0;\n  var isDone = false;\n\n  function done() {\n    isDone = true;\n    callback.apply(this, arguments);\n  }\n\n  function next() {\n    if (isDone) return;\n\n    if (currentTurn < turns) {\n      work.call(this, currentTurn++, next, done);\n    } else {\n      done.apply(this, arguments);\n    }\n  }\n\n  next();\n}","/*eslint-disable no-empty */\n'use strict';\n\nexports.__esModule = true;\nexports.saveState = saveState;\nexports.readState = readState;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar KeyPrefix = '@@History/';\nvar QuotaExceededError = 'QuotaExceededError';\nvar SecurityError = 'SecurityError';\n\nfunction createKey(key) {\n  return KeyPrefix + key;\n}\n\nfunction saveState(key, state) {\n  try {\n    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;\n\n      return;\n    }\n\n    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {\n      // Safari \"private mode\" throws QuotaExceededError.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;\n\n      return;\n    }\n\n    throw error;\n  }\n}\n\nfunction readState(key) {\n  var json = undefined;\n  try {\n    json = window.sessionStorage.getItem(createKey(key));\n  } catch (error) {\n    if (error.name === SecurityError) {\n      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any\n      // attempt to access window.sessionStorage.\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;\n\n      return null;\n    }\n  }\n\n  if (json) {\n    try {\n      return JSON.parse(json);\n    } catch (error) {\n      // Ignore invalid JSON.\n    }\n  }\n\n  return null;\n}","'use strict';\n\nexports.__esModule = true;\nexports.addEventListener = addEventListener;\nexports.removeEventListener = removeEventListener;\nexports.getHashPath = getHashPath;\nexports.replaceHashPath = replaceHashPath;\nexports.getWindowPath = getWindowPath;\nexports.go = go;\nexports.getUserConfirmation = getUserConfirmation;\nexports.supportsHistory = supportsHistory;\nexports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;\n\nfunction addEventListener(node, event, listener) {\n  if (node.addEventListener) {\n    node.addEventListener(event, listener, false);\n  } else {\n    node.attachEvent('on' + event, listener);\n  }\n}\n\nfunction removeEventListener(node, event, listener) {\n  if (node.removeEventListener) {\n    node.removeEventListener(event, listener, false);\n  } else {\n    node.detachEvent('on' + event, listener);\n  }\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  return window.location.href.split('#')[1] || '';\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(window.location.pathname + window.location.search + '#' + path);\n}\n\nfunction getWindowPath() {\n  return window.location.pathname + window.location.search + window.location.hash;\n}\n\nfunction go(n) {\n  if (n) window.history.go(n);\n}\n\nfunction getUserConfirmation(message, callback) {\n  callback(window.confirm(message));\n}\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {\n    return false;\n  }\n  // FIXME: Work around our browser history not working correctly on Chrome\n  // iOS: https://github.com/rackt/react-router/issues/2565\n  if (ua.indexOf('CriOS') !== -1) {\n    return false;\n  }\n  return window.history && 'pushState' in window.history;\n}\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  var ua = navigator.userAgent;\n  return ua.indexOf('Firefox') === -1;\n}","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _Actions = require('./Actions');\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _DOMStateStorage = require('./DOMStateStorage');\n\nvar _createDOMHistory = require('./createDOMHistory');\n\nvar _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve URLs.\n */\nfunction createBrowserHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;\n\n  var forceRefresh = options.forceRefresh;\n\n  var isSupported = _DOMUtils.supportsHistory();\n  var useRefresh = !isSupported || forceRefresh;\n\n  function getCurrentLocation(historyState) {\n    historyState = historyState || window.history.state || {};\n\n    var path = _DOMUtils.getWindowPath();\n    var _historyState = historyState;\n    var key = _historyState.key;\n\n    var state = undefined;\n    if (key) {\n      state = _DOMStateStorage.readState(key);\n    } else {\n      state = null;\n      key = history.createKey();\n\n      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);\n    }\n\n    var location = _parsePath2['default'](path);\n\n    return history.createLocation(_extends({}, location, { state: state }), undefined, key);\n  }\n\n  function startPopStateListener(_ref) {\n    var transitionTo = _ref.transitionTo;\n\n    function popStateListener(event) {\n      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.\n\n      transitionTo(getCurrentLocation(event.state));\n    }\n\n    _DOMUtils.addEventListener(window, 'popstate', popStateListener);\n\n    return function () {\n      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);\n    };\n  }\n\n  function finishTransition(location) {\n    var basename = location.basename;\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n    var state = location.state;\n    var action = location.action;\n    var key = location.key;\n\n    if (action === _Actions.POP) return; // Nothing to do.\n\n    _DOMStateStorage.saveState(key, state);\n\n    var path = (basename || '') + pathname + search + hash;\n    var historyState = {\n      key: key\n    };\n\n    if (action === _Actions.PUSH) {\n      if (useRefresh) {\n        window.location.href = path;\n        return false; // Prevent location update.\n      } else {\n          window.history.pushState(historyState, null, path);\n        }\n    } else {\n      // REPLACE\n      if (useRefresh) {\n        window.location.replace(path);\n        return false; // Prevent location update.\n      } else {\n          window.history.replaceState(historyState, null, path);\n        }\n    }\n  }\n\n  var history = _createDOMHistory2['default'](_extends({}, options, {\n    getCurrentLocation: getCurrentLocation,\n    finishTransition: finishTransition,\n    saveState: _DOMStateStorage.saveState\n  }));\n\n  var listenerCount = 0,\n      stopPopStateListener = undefined;\n\n  function listenBefore(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listenBefore(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  function listen(listener) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    var unlisten = history.listen(listener);\n\n    return function () {\n      unlisten();\n\n      if (--listenerCount === 0) stopPopStateListener();\n    };\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);\n\n    history.registerTransitionHook(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    history.unregisterTransitionHook(hook);\n\n    if (--listenerCount === 0) stopPopStateListener();\n  }\n\n  return _extends({}, history, {\n    listenBefore: listenBefore,\n    listen: listen,\n    registerTransitionHook: registerTransitionHook,\n    unregisterTransitionHook: unregisterTransitionHook\n  });\n}\n\nexports['default'] = createBrowserHistory;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar _DOMUtils = require('./DOMUtils');\n\nvar _createHistory = require('./createHistory');\n\nvar _createHistory2 = _interopRequireDefault(_createHistory);\n\nfunction createDOMHistory(options) {\n  var history = _createHistory2['default'](_extends({\n    getUserConfirmation: _DOMUtils.getUserConfirmation\n  }, options, {\n    go: _DOMUtils.go\n  }));\n\n  function listen(listener) {\n    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;\n\n    return history.listen(listener);\n  }\n\n  return _extends({}, history, {\n    listen: listen\n  });\n}\n\nexports['default'] = createDOMHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _AsyncUtils = require('./AsyncUtils');\n\nvar _Actions = require('./Actions');\n\nvar _createLocation2 = require('./createLocation');\n\nvar _createLocation3 = _interopRequireDefault(_createLocation2);\n\nvar _runTransitionHook = require('./runTransitionHook');\n\nvar _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nvar _deprecate = require('./deprecate');\n\nvar _deprecate2 = _interopRequireDefault(_deprecate);\n\nfunction createRandomKey(length) {\n  return Math.random().toString(36).substr(2, length);\n}\n\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search &&\n  //a.action === b.action && // Different action !== location change.\n  a.key === b.key && _deepEqual2['default'](a.state, b.state);\n}\n\nvar DefaultKeyLength = 6;\n\nfunction createHistory() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n  var getCurrentLocation = options.getCurrentLocation;\n  var finishTransition = options.finishTransition;\n  var saveState = options.saveState;\n  var go = options.go;\n  var keyLength = options.keyLength;\n  var getUserConfirmation = options.getUserConfirmation;\n\n  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;\n\n  var transitionHooks = [];\n\n  function listenBefore(hook) {\n    transitionHooks.push(hook);\n\n    return function () {\n      transitionHooks = transitionHooks.filter(function (item) {\n        return item !== hook;\n      });\n    };\n  }\n\n  var allKeys = [];\n  var changeListeners = [];\n  var location = undefined;\n\n  function getCurrent() {\n    if (pendingLocation && pendingLocation.action === _Actions.POP) {\n      return allKeys.indexOf(pendingLocation.key);\n    } else if (location) {\n      return allKeys.indexOf(location.key);\n    } else {\n      return -1;\n    }\n  }\n\n  function updateLocation(newLocation) {\n    var current = getCurrent();\n\n    location = newLocation;\n\n    if (location.action === _Actions.PUSH) {\n      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);\n    } else if (location.action === _Actions.REPLACE) {\n      allKeys[current] = location.key;\n    }\n\n    changeListeners.forEach(function (listener) {\n      listener(location);\n    });\n  }\n\n  function listen(listener) {\n    changeListeners.push(listener);\n\n    if (location) {\n      listener(location);\n    } else {\n      var _location = getCurrentLocation();\n      allKeys = [_location.key];\n      updateLocation(_location);\n    }\n\n    return function () {\n      changeListeners = changeListeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function confirmTransitionTo(location, callback) {\n    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {\n      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {\n        if (result != null) {\n          done(result);\n        } else {\n          next();\n        }\n      });\n    }, function (message) {\n      if (getUserConfirmation && typeof message === 'string') {\n        getUserConfirmation(message, function (ok) {\n          callback(ok !== false);\n        });\n      } else {\n        callback(message !== false);\n      }\n    });\n  }\n\n  var pendingLocation = undefined;\n\n  function transitionTo(nextLocation) {\n    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.\n\n    pendingLocation = nextLocation;\n\n    confirmTransitionTo(nextLocation, function (ok) {\n      if (pendingLocation !== nextLocation) return; // Transition was interrupted.\n\n      if (ok) {\n        // treat PUSH to current path like REPLACE to be consistent with browsers\n        if (nextLocation.action === _Actions.PUSH) {\n          var prevPath = createPath(location);\n          var nextPath = createPath(nextLocation);\n\n          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;\n        }\n\n        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);\n      } else if (location && nextLocation.action === _Actions.POP) {\n        var prevIndex = allKeys.indexOf(location.key);\n        var nextIndex = allKeys.indexOf(nextLocation.key);\n\n        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.\n      }\n    });\n  }\n\n  function push(location) {\n    transitionTo(createLocation(location, _Actions.PUSH, createKey()));\n  }\n\n  function replace(location) {\n    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function createKey() {\n    return createRandomKey(keyLength);\n  }\n\n  function createPath(location) {\n    if (location == null || typeof location === 'string') return location;\n\n    var pathname = location.pathname;\n    var search = location.search;\n    var hash = location.hash;\n\n    var result = pathname;\n\n    if (search) result += search;\n\n    if (hash) result += hash;\n\n    return result;\n  }\n\n  function createHref(location) {\n    return createPath(location);\n  }\n\n  function createLocation(location, action) {\n    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];\n\n    if (typeof action === 'object') {\n      //warning(\n      //  false,\n      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +\n      //  'location descriptor instead'\n      //)\n\n      if (typeof location === 'string') location = _parsePath2['default'](location);\n\n      location = _extends({}, location, { state: action });\n\n      action = key;\n      key = arguments[3] || createKey();\n    }\n\n    return _createLocation3['default'](location, action, key);\n  }\n\n  // deprecated\n  function setState(state) {\n    if (location) {\n      updateLocationState(location, state);\n      updateLocation(location);\n    } else {\n      updateLocationState(getCurrentLocation(), state);\n    }\n  }\n\n  function updateLocationState(location, state) {\n    location.state = _extends({}, location.state, state);\n    saveState(location.key, location.state);\n  }\n\n  // deprecated\n  function registerTransitionHook(hook) {\n    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);\n  }\n\n  // deprecated\n  function unregisterTransitionHook(hook) {\n    transitionHooks = transitionHooks.filter(function (item) {\n      return item !== hook;\n    });\n  }\n\n  // deprecated\n  function pushState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    push(_extends({ state: state }, path));\n  }\n\n  // deprecated\n  function replaceState(state, path) {\n    if (typeof path === 'string') path = _parsePath2['default'](path);\n\n    replace(_extends({ state: state }, path));\n  }\n\n  return {\n    listenBefore: listenBefore,\n    listen: listen,\n    transitionTo: transitionTo,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    createKey: createKey,\n    createPath: createPath,\n    createHref: createHref,\n    createLocation: createLocation,\n\n    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),\n    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),\n    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),\n    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),\n    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')\n  };\n}\n\nexports['default'] = createHistory;\nmodule.exports = exports['default'];","//import warning from 'warning'\n'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Actions = require('./Actions');\n\nvar _parsePath = require('./parsePath');\n\nvar _parsePath2 = _interopRequireDefault(_parsePath);\n\nfunction createLocation() {\n  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];\n  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];\n  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n  if (typeof location === 'string') location = _parsePath2['default'](location);\n\n  if (typeof action === 'object') {\n    //warning(\n    //  false,\n    //  'The state (2nd) argument to createLocation is deprecated; use a ' +\n    //  'location descriptor instead'\n    //)\n\n    location = _extends({}, location, { state: action });\n\n    action = key || _Actions.POP;\n    key = _fourthArg;\n  }\n\n  var pathname = location.pathname || '/';\n  var search = location.search || '';\n  var hash = location.hash || '';\n  var state = location.state || null;\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash,\n    state: state,\n    action: action,\n    key: key\n  };\n}\n\nexports['default'] = createLocation;\nmodule.exports = exports['default'];","//import warning from 'warning'\n\n\"use strict\";\n\nexports.__esModule = true;\nfunction deprecate(fn) {\n  return fn;\n  //return function () {\n  //  warning(false, '[history] ' + message)\n  //  return fn.apply(this, arguments)\n  //}\n}\n\nexports[\"default\"] = deprecate;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nexports.__esModule = true;\nfunction extractPath(string) {\n  var match = string.match(/^https?:\\/\\/[^\\/]*/);\n\n  if (match == null) return string;\n\n  return string.substring(match[0].length);\n}\n\nexports[\"default\"] = extractPath;\nmodule.exports = exports[\"default\"];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _extractPath = require('./extractPath');\n\nvar _extractPath2 = _interopRequireDefault(_extractPath);\n\nfunction parsePath(path) {\n  var pathname = _extractPath2['default'](path);\n  var search = '';\n  var hash = '';\n\n  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like \"%s\"', path) : undefined;\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex);\n    pathname = pathname.substring(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex);\n    pathname = pathname.substring(0, searchIndex);\n  }\n\n  if (pathname === '') pathname = '/';\n\n  return {\n    pathname: pathname,\n    search: search,\n    hash: hash\n  };\n}\n\nexports['default'] = parsePath;\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction runTransitionHook(hook, location, callback) {\n  var result = hook(location, callback);\n\n  if (hook.length < 2) {\n    // Assume the hook runs synchronously and automatically\n    // call the callback with the return value.\n    callback(result);\n  } else {\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not \"return\" in a transition hook with a callback argument; call the callback instead') : undefined;\n  }\n}\n\nexports['default'] = runTransitionHook;\nmodule.exports = exports['default'];","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}